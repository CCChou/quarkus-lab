# Configuration file
# key = value
# configure person datasource
%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://postgres-database/person
%prod.quarkus.datasource.jdbc.driver=org.postgresql.Driver
%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:person
%dev.quarkus.datasource.jdbc.driver=org.h2.Driver
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:person
%test.quarkus.datasource.jdbc.driver=org.h2.Driver
quarkus.datasource.username=sa
quarkus.datasource.password=sa
# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=drop-and-create
database.up=true
# init properties
greeting.message=hi
greeting.name=quarkus in dev mode
%prod.greeting.name=production quarkus
notification.misbehave=false
notification.timouot=false
notification.crash=false
# Production OpenShift config
%prod.quarkus.kubernetes-client.trust-certs=true
%prod.quarkus.kubernetes.deploy=true
%prod.quarkus.kubernetes.deployment-target=openshift
%prod.quarkus.openshift.build-strategy=docker
%prod.quarkus.openshift.expose=true
# Enable Swagger UI
quarkus.swagger-ui.always-include=true
# Configure the Kafka sink (we write to it)
%prod.mp.messaging.outgoing.generated-name.bootstrap.servers=names-cluster-kafka-bootstrap:9092
%prod.mp.messaging.outgoing.generated-name.connector=smallrye-kafka
%prod.mp.messaging.outgoing.generated-name.topic=names
%prod.mp.messaging.outgoing.generated-name.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# Configure the Kafka source (we read from it)
%prod.mp.messaging.incoming.names.bootstrap.servers=names-cluster-kafka-bootstrap:9092
%prod.mp.messaging.incoming.names.connector=smallrye-kafka
%prod.mp.messaging.incoming.names.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Configure jaeger endpoint
%prod.quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
%prod.quarkus.jaeger.service-name=quarkus-person
%prod.quarkus.jaeger.sampler-type=const
%prod.quarkus.jaeger.sampler-param=1
%prod.quarkus.jaeger.endpoint=http://jaeger-all-in-one-inmemory-collector:14268/api/traces
%prod.quarkus.jaeger.propagation=b3
%prod.quarkus.jaeger.reporter-log-spans=true
# Configure Keycloak source
# OIDC config
# %prod.quarkus.oidc.auth-server-url=https://keycloak-quarkus-lab-project.apps.cluster-bv88w.bv88w.sandbox1041.opentlc.com/auth/realms/quarkus
# %prod.quarkus.oidc.client-id=quarkus-service
# %prod.quarkus.oidc.credentials.secret=b038fc85-4988-465e-a58e-5b6764d38797
# %prod.quarkus.http.cors=true
# #Enable Policy Enforcement
# quarkus.keycloak.policy-enforcer.enable=true
# quarkus.keycloak.policy-enforcer.paths.ready.name=Readiness
# quarkus.keycloak.policy-enforcer.paths.ready.path=/q/health/ready
# quarkus.keycloak.policy-enforcer.paths.ready.enforcement-mode=DISABLED
# quarkus.keycloak.policy-enforcer.paths.live.name=Liveness
# quarkus.keycloak.policy-enforcer.paths.live.path=/q/health/live
# quarkus.keycloak.policy-enforcer.paths.live.enforcement-mode=DISABLED